/* tslint:disable */
/* eslint-disable */
/**
 * Cuuro backend api service
 * The backend service for cuuro
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateApplicationDto
 */
export interface CreateApplicationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateApplicationDto
     */
    'roundId': string;
}
/**
 * 
 * @export
 * @interface CreateAuthDto
 */
export interface CreateAuthDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAuthDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAuthDto
     */
    'invitedBy': string | null;
}
/**
 * 
 * @export
 * @interface CreateInvestorDto
 */
export interface CreateInvestorDto {
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorDto
     */
    'name': string;
    /**
     * 
     * @type {CreateInvestorUserDto}
     * @memberof CreateInvestorDto
     */
    'users': CreateInvestorUserDto;
}
/**
 * 
 * @export
 * @interface CreateInvestorUserDto
 */
export interface CreateInvestorUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'passwordConfirmation': string;
    /**
     * 
     * @type {string}
     * @memberof CreateInvestorUserDto
     */
    'avatar'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateInvestorUserDto
     */
    'companyType': object;
}
/**
 * 
 * @export
 * @interface CreateRoundDto
 */
export interface CreateRoundDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoundDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoundDto
     */
    'fundingRound': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoundDto
     */
    'isActive': boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateRoundDto
     */
    'targetRaise': number;
    /**
     * 
     * @type {number}
     * @memberof CreateRoundDto
     */
    'totalRaised': number;
    /**
     * 
     * @type {number}
     * @memberof CreateRoundDto
     */
    'valuation': number;
}
/**
 * 
 * @export
 * @interface CreateStartupDto
 */
export interface CreateStartupDto {
    /**
     * 
     * @type {CreateStartupUserDto}
     * @memberof CreateStartupDto
     */
    'users': CreateStartupUserDto;
}
/**
 * 
 * @export
 * @interface CreateStartupUserDto
 */
export interface CreateStartupUserDto {
    /**
     * First name
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'firstName': string;
    /**
     * Last name
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'lastName': string;
    /**
     * Email
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'password': string;
    /**
     * Password
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'passwordConfirmation': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStartupUserDto
     */
    'avatar'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateStartupUserDto
     */
    'companyType': object;
}
/**
 * 
 * @export
 * @interface LoginAuthDto
 */
export interface LoginAuthDto {
    /**
     * 
     * @type {string}
     * @memberof LoginAuthDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginAuthDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface OnboardInvestorDto
 */
export interface OnboardInvestorDto {
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'summary': string;
    /**
     * 
     * @type {number}
     * @memberof OnboardInvestorDto
     */
    'yearFounded': number;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'pitchDeck': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'logo': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'linkedinUrl': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'twitterUrl': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'companySize': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'industry': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnboardInvestorDto
     */
    'secondaryIndustries': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'businessModel': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'fundingRound': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'fundingType': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'primaryLocation': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'secondaryLocation': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardInvestorDto
     */
    'investorType': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnboardInvestorDto
     */
    'investmentRounds': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OnboardInvestorDto
     */
    'minChequeSize': number;
    /**
     * 
     * @type {number}
     * @memberof OnboardInvestorDto
     */
    'maxChequeSize': number;
    /**
     * 
     * @type {number}
     * @memberof OnboardInvestorDto
     */
    'fundSize': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnboardInvestorDto
     */
    'investmentFocus': Array<OnboardInvestorDtoInvestmentFocusEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnboardInvestorDto
     */
    'investmentGeography': Array<string>;
}

export const OnboardInvestorDtoInvestmentFocusEnum = {
    Agency: 'Agency',
    Adtech: 'Adtech',
    Aerospace: 'Aerospace',
    Agriculture: 'Agriculture',
    AiMl: 'AI/ML',
    Analytics: 'Analytics',
    Api: 'API',
    ArVr: 'AR/VR',
    Automation: 'Automation',
    B2BSaaS: 'B2B SaaS',
    Biotech: 'Biotech',
    Cloud: 'Cloud',
    CryptoBlockchain: 'Crypto/Blockchain',
    Community: 'Community',
    Construction: 'Construction',
    Consumer: 'Consumer',
    DeepTech: 'Deep Tech',
    DeveloperTools: 'Developer Tools',
    EcommerceRetail: 'Ecommerce/Retail',
    Education: 'Education',
    Energy: 'Energy',
    Enterprise: 'Enterprise',
    Entertainment: 'Entertainment',
    FinancialServices: 'Financial Services',
    FoodBeverage: 'Food/Beverage',
    Freight: 'Freight',
    FutureOfWork: 'Future of work',
    Gaming: 'Gaming',
    GovernmentTechnology: 'Government Technology',
    Hardware: 'Hardware',
    Healthcare: 'Healthcare',
    Insurance: 'Insurance',
    IoT: 'IoT',
    Marketplace: 'Marketplace',
    Media: 'Media',
    Productivity: 'Productivity',
    RealEstate: 'Real Estate',
    Saas: 'SAAS',
    Transportation: 'Transportation',
    Other: 'Other'
} as const;

export type OnboardInvestorDtoInvestmentFocusEnum = typeof OnboardInvestorDtoInvestmentFocusEnum[keyof typeof OnboardInvestorDtoInvestmentFocusEnum];

/**
 * 
 * @export
 * @interface OnboardStartupDto
 */
export interface OnboardStartupDto {
    /**
     * Company name
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'name': string;
    /**
     * Company website
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'website': string;
    /**
     * Company summary
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'summary': string;
    /**
     * Company year founded
     * @type {number}
     * @memberof OnboardStartupDto
     */
    'yearFounded': number;
    /**
     * Company location
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'location': string;
    /**
     * Linkedin URL
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'linkedinUrl': string;
    /**
     * Twitter URL
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'twitterUrl': string;
    /**
     * Company Size
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'companySize': OnboardStartupDtoCompanySizeEnum;
    /**
     * Company industry
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'industry': OnboardStartupDtoIndustryEnum;
    /**
     * Company business model
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'businessModel': OnboardStartupDtoBusinessModelEnum;
    /**
     * Company funding round
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'fundingRound': OnboardStartupDtoFundingRoundEnum;
    /**
     * Company funding type
     * @type {string}
     * @memberof OnboardStartupDto
     */
    'fundingType': OnboardStartupDtoFundingTypeEnum;
    /**
     * 
     * @type {OnboardStartupDtoRound}
     * @memberof OnboardStartupDto
     */
    'round': OnboardStartupDtoRound;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnboardStartupDto
     */
    'secondaryIndustries': Array<string>;
}

export const OnboardStartupDtoCompanySizeEnum = {
    _19: '1-9',
    _1049: '10-49',
    _50249: '50-249',
    _250: '250+'
} as const;

export type OnboardStartupDtoCompanySizeEnum = typeof OnboardStartupDtoCompanySizeEnum[keyof typeof OnboardStartupDtoCompanySizeEnum];
export const OnboardStartupDtoIndustryEnum = {
    Agency: 'Agency',
    Adtech: 'Adtech',
    Aerospace: 'Aerospace',
    Agriculture: 'Agriculture',
    AiMl: 'AI/ML',
    Analytics: 'Analytics',
    Api: 'API',
    ArVr: 'AR/VR',
    Automation: 'Automation',
    B2BSaaS: 'B2B SaaS',
    Biotech: 'Biotech',
    Cloud: 'Cloud',
    CryptoBlockchain: 'Crypto/Blockchain',
    Community: 'Community',
    Construction: 'Construction',
    Consumer: 'Consumer',
    DeepTech: 'Deep Tech',
    DeveloperTools: 'Developer Tools',
    EcommerceRetail: 'Ecommerce/Retail',
    Education: 'Education',
    Energy: 'Energy',
    Enterprise: 'Enterprise',
    Entertainment: 'Entertainment',
    FinancialServices: 'Financial Services',
    FoodBeverage: 'Food/Beverage',
    Freight: 'Freight',
    FutureOfWork: 'Future of work',
    Gaming: 'Gaming',
    GovernmentTechnology: 'Government Technology',
    Hardware: 'Hardware',
    Healthcare: 'Healthcare',
    Insurance: 'Insurance',
    IoT: 'IoT',
    Marketplace: 'Marketplace',
    Media: 'Media',
    Productivity: 'Productivity',
    RealEstate: 'Real Estate',
    Saas: 'SAAS',
    Transportation: 'Transportation',
    Other: 'Other'
} as const;

export type OnboardStartupDtoIndustryEnum = typeof OnboardStartupDtoIndustryEnum[keyof typeof OnboardStartupDtoIndustryEnum];
export const OnboardStartupDtoBusinessModelEnum = {
    B2B: 'B2B',
    B2C: 'B2C',
    B2B2C: 'B2B2C',
    C2B: 'C2B',
    C2C: 'C2C'
} as const;

export type OnboardStartupDtoBusinessModelEnum = typeof OnboardStartupDtoBusinessModelEnum[keyof typeof OnboardStartupDtoBusinessModelEnum];
export const OnboardStartupDtoFundingRoundEnum = {
    PreSeed: 'Pre-Seed',
    Seed: 'Seed',
    SeedExtension: 'Seed Extension',
    SeriesA: 'Series A',
    SeriesB: 'Series B',
    SeriesC: 'Series C',
    SeriesD: 'Series D',
    SeriesE: 'Series E'
} as const;

export type OnboardStartupDtoFundingRoundEnum = typeof OnboardStartupDtoFundingRoundEnum[keyof typeof OnboardStartupDtoFundingRoundEnum];
export const OnboardStartupDtoFundingTypeEnum = {
    Safe: 'SAFE',
    PricedRound: 'Priced Round',
    ConvertibleNote: 'Convertible Note',
    Credit: 'Credit'
} as const;

export type OnboardStartupDtoFundingTypeEnum = typeof OnboardStartupDtoFundingTypeEnum[keyof typeof OnboardStartupDtoFundingTypeEnum];

/**
 * Round
 * @export
 * @interface OnboardStartupDtoRound
 */
export interface OnboardStartupDtoRound {
    /**
     * 
     * @type {string}
     * @memberof OnboardStartupDtoRound
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OnboardStartupDtoRound
     */
    'fundingRound': string;
    /**
     * 
     * @type {boolean}
     * @memberof OnboardStartupDtoRound
     */
    'isActive': boolean;
    /**
     * 
     * @type {number}
     * @memberof OnboardStartupDtoRound
     */
    'targetRaise': number;
    /**
     * 
     * @type {number}
     * @memberof OnboardStartupDtoRound
     */
    'totalRaised': number;
    /**
     * 
     * @type {number}
     * @memberof OnboardStartupDtoRound
     */
    'valuation': number;
}
/**
 * 
 * @export
 * @interface SeedQuestionnaireDto
 */
export interface SeedQuestionnaireDto {
    /**
     * 
     * @type {string}
     * @memberof SeedQuestionnaireDto
     */
    'investorId': string;
}
/**
 * 
 * @export
 * @interface UpdateRoundDto
 */
export interface UpdateRoundDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoundDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoundDto
     */
    'fundingRound'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoundDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateRoundDto
     */
    'targetRaise'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRoundDto
     */
    'totalRaised'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRoundDto
     */
    'valuation'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateApplicationDto} createApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerCreate: async (createApplicationDto: CreateApplicationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createApplicationDto' is not null or undefined
            assertParamExists('applicationsControllerCreate', 'createApplicationDto', createApplicationDto)
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createApplicationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsControllerFindOne', 'id', id)
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindQues: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerSubmit: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('applicationsControllerSubmit', 'id', id)
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerCreate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contactsControllerCreate', 'body', body)
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contactsControllerFindOne', 'id', id)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contactsControllerRemove', 'id', id)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contactsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contactsControllerUpdate', 'body', body)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorControllerLogin: async (loginAuthDto: LoginAuthDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginAuthDto' is not null or undefined
            assertParamExists('investorControllerLogin', 'loginAuthDto', loginAuthDto)
            const localVarPath = `/auth/investor/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorControllerSendLink: async (createAuthDto: CreateAuthDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAuthDto' is not null or undefined
            assertParamExists('investorControllerSendLink', 'createAuthDto', createAuthDto)
            const localVarPath = `/auth/investor/magic-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateInvestorDto} createInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorsControllerCreate: async (createInvestorDto: CreateInvestorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInvestorDto' is not null or undefined
            assertParamExists('investorsControllerCreate', 'createInvestorDto', createInvestorDto)
            const localVarPath = `/investors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInvestorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OnboardInvestorDto} onboardInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorsControllerOnBoardInvestor: async (onboardInvestorDto: OnboardInvestorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onboardInvestorDto' is not null or undefined
            assertParamExists('investorsControllerOnBoardInvestor', 'onboardInvestorDto', onboardInvestorDto)
            const localVarPath = `/investors/onboarding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onboardInvestorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeedQuestionnaireDto} seedQuestionnaireDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionnaireControllerSeed: async (seedQuestionnaireDto: SeedQuestionnaireDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seedQuestionnaireDto' is not null or undefined
            assertParamExists('questionnaireControllerSeed', 'seedQuestionnaireDto', seedQuestionnaireDto)
            const localVarPath = `/questionnaire/seed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seedQuestionnaireDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoundDto} createRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerCreate: async (createRoundDto: CreateRoundDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoundDto' is not null or undefined
            assertParamExists('roundControllerCreate', 'createRoundDto', createRoundDto)
            const localVarPath = `/round`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoundDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/round`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roundControllerFindOne', 'id', id)
            const localVarPath = `/round/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roundControllerRemove', 'id', id)
            const localVarPath = `/round/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoundDto} updateRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerUpdate: async (id: string, updateRoundDto: UpdateRoundDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roundControllerUpdate', 'id', id)
            // verify required parameter 'updateRoundDto' is not null or undefined
            assertParamExists('roundControllerUpdate', 'updateRoundDto', updateRoundDto)
            const localVarPath = `/round/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoundDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupAuthControllerLogin: async (loginAuthDto: LoginAuthDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginAuthDto' is not null or undefined
            assertParamExists('startupAuthControllerLogin', 'loginAuthDto', loginAuthDto)
            const localVarPath = `/auth/startup/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupAuthControllerSendStartupLink: async (createAuthDto: CreateAuthDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAuthDto' is not null or undefined
            assertParamExists('startupAuthControllerSendStartupLink', 'createAuthDto', createAuthDto)
            const localVarPath = `/auth/startup/magic-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateApplicationDto} createApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsControllerCreate(createApplicationDto: CreateApplicationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsControllerCreate(createApplicationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsControllerFindQues(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsControllerFindQues(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationsControllerSubmit(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicationsControllerSubmit(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsControllerCreate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsControllerCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactsControllerUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactsControllerUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investorControllerLogin(loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investorControllerLogin(loginAuthDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investorControllerSendLink(createAuthDto: CreateAuthDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investorControllerSendLink(createAuthDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateInvestorDto} createInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investorsControllerCreate(createInvestorDto: CreateInvestorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investorsControllerCreate(createInvestorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OnboardInvestorDto} onboardInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investorsControllerOnBoardInvestor(onboardInvestorDto: OnboardInvestorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investorsControllerOnBoardInvestor(onboardInvestorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeedQuestionnaireDto} seedQuestionnaireDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionnaireControllerSeed(seedQuestionnaireDto: SeedQuestionnaireDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionnaireControllerSeed(seedQuestionnaireDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateRoundDto} createRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundControllerCreate(createRoundDto: CreateRoundDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundControllerCreate(createRoundDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoundDto} updateRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundControllerUpdate(id: string, updateRoundDto: UpdateRoundDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundControllerUpdate(id, updateRoundDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startupAuthControllerLogin(loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startupAuthControllerLogin(loginAuthDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startupAuthControllerSendStartupLink(createAuthDto: CreateAuthDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startupAuthControllerSendStartupLink(createAuthDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateApplicationDto} createApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerCreate(createApplicationDto: CreateApplicationDto, options?: any): AxiosPromise<void> {
            return localVarFp.applicationsControllerCreate(createApplicationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.applicationsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.applicationsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerFindQues(options?: any): AxiosPromise<void> {
            return localVarFp.applicationsControllerFindQues(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsControllerSubmit(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.applicationsControllerSubmit(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerCreate(body: object, options?: any): AxiosPromise<string> {
            return localVarFp.contactsControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerFindAll(options?: any): AxiosPromise<string> {
            return localVarFp.contactsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerFindOne(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.contactsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.contactsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsControllerUpdate(id: string, body: object, options?: any): AxiosPromise<string> {
            return localVarFp.contactsControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorControllerLogin(loginAuthDto: LoginAuthDto, options?: any): AxiosPromise<void> {
            return localVarFp.investorControllerLogin(loginAuthDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorControllerSendLink(createAuthDto: CreateAuthDto, options?: any): AxiosPromise<void> {
            return localVarFp.investorControllerSendLink(createAuthDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateInvestorDto} createInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorsControllerCreate(createInvestorDto: CreateInvestorDto, options?: any): AxiosPromise<void> {
            return localVarFp.investorsControllerCreate(createInvestorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OnboardInvestorDto} onboardInvestorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investorsControllerOnBoardInvestor(onboardInvestorDto: OnboardInvestorDto, options?: any): AxiosPromise<void> {
            return localVarFp.investorsControllerOnBoardInvestor(onboardInvestorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeedQuestionnaireDto} seedQuestionnaireDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionnaireControllerSeed(seedQuestionnaireDto: SeedQuestionnaireDto, options?: any): AxiosPromise<object> {
            return localVarFp.questionnaireControllerSeed(seedQuestionnaireDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRoundDto} createRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerCreate(createRoundDto: CreateRoundDto, options?: any): AxiosPromise<string> {
            return localVarFp.roundControllerCreate(createRoundDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerFindAll(options?: any): AxiosPromise<string> {
            return localVarFp.roundControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerFindOne(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.roundControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.roundControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoundDto} updateRoundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundControllerUpdate(id: string, updateRoundDto: UpdateRoundDto, options?: any): AxiosPromise<string> {
            return localVarFp.roundControllerUpdate(id, updateRoundDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginAuthDto} loginAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupAuthControllerLogin(loginAuthDto: LoginAuthDto, options?: any): AxiosPromise<void> {
            return localVarFp.startupAuthControllerLogin(loginAuthDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuthDto} createAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupAuthControllerSendStartupLink(createAuthDto: CreateAuthDto, options?: any): AxiosPromise<void> {
            return localVarFp.startupAuthControllerSendStartupLink(createAuthDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateApplicationDto} createApplicationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applicationsControllerCreate(createApplicationDto: CreateApplicationDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applicationsControllerCreate(createApplicationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applicationsControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applicationsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applicationsControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applicationsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applicationsControllerFindQues(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applicationsControllerFindQues(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applicationsControllerSubmit(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applicationsControllerSubmit(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contactsControllerCreate(body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contactsControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contactsControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contactsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contactsControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contactsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contactsControllerRemove(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contactsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contactsControllerUpdate(id: string, body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contactsControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginAuthDto} loginAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public investorControllerLogin(loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).investorControllerLogin(loginAuthDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAuthDto} createAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public investorControllerSendLink(createAuthDto: CreateAuthDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).investorControllerSendLink(createAuthDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateInvestorDto} createInvestorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public investorsControllerCreate(createInvestorDto: CreateInvestorDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).investorsControllerCreate(createInvestorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OnboardInvestorDto} onboardInvestorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public investorsControllerOnBoardInvestor(onboardInvestorDto: OnboardInvestorDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).investorsControllerOnBoardInvestor(onboardInvestorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeedQuestionnaireDto} seedQuestionnaireDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public questionnaireControllerSeed(seedQuestionnaireDto: SeedQuestionnaireDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).questionnaireControllerSeed(seedQuestionnaireDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRoundDto} createRoundDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roundControllerCreate(createRoundDto: CreateRoundDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).roundControllerCreate(createRoundDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roundControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).roundControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roundControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).roundControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roundControllerRemove(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).roundControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRoundDto} updateRoundDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roundControllerUpdate(id: string, updateRoundDto: UpdateRoundDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).roundControllerUpdate(id, updateRoundDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginAuthDto} loginAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startupAuthControllerLogin(loginAuthDto: LoginAuthDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startupAuthControllerLogin(loginAuthDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAuthDto} createAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startupAuthControllerSendStartupLink(createAuthDto: CreateAuthDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startupAuthControllerSendStartupLink(createAuthDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HelloApi - axios parameter creator
 * @export
 */
export const HelloApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelloApi - functional programming interface
 * @export
 */
export const HelloApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelloApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelloApi - factory interface
 * @export
 */
export const HelloApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelloApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelloApi - object-oriented interface
 * @export
 * @class HelloApi
 * @extends {BaseAPI}
 */
export class HelloApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return HelloApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StartupsApi - axios parameter creator
 * @export
 */
export const StartupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStartupDto} createStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupsControllerCreate: async (createStartupDto: CreateStartupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStartupDto' is not null or undefined
            assertParamExists('startupsControllerCreate', 'createStartupDto', createStartupDto)
            const localVarPath = `/startups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStartupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OnboardStartupDto} onboardStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupsControllerOnBoardInvestor: async (onboardStartupDto: OnboardStartupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onboardStartupDto' is not null or undefined
            assertParamExists('startupsControllerOnBoardInvestor', 'onboardStartupDto', onboardStartupDto)
            const localVarPath = `/startups/onboarding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onboardStartupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StartupsApi - functional programming interface
 * @export
 */
export const StartupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StartupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStartupDto} createStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startupsControllerCreate(createStartupDto: CreateStartupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startupsControllerCreate(createStartupDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OnboardStartupDto} onboardStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startupsControllerOnBoardInvestor(onboardStartupDto: OnboardStartupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startupsControllerOnBoardInvestor(onboardStartupDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StartupsApi - factory interface
 * @export
 */
export const StartupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StartupsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateStartupDto} createStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupsControllerCreate(createStartupDto: CreateStartupDto, options?: any): AxiosPromise<void> {
            return localVarFp.startupsControllerCreate(createStartupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OnboardStartupDto} onboardStartupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startupsControllerOnBoardInvestor(onboardStartupDto: OnboardStartupDto, options?: any): AxiosPromise<void> {
            return localVarFp.startupsControllerOnBoardInvestor(onboardStartupDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StartupsApi - object-oriented interface
 * @export
 * @class StartupsApi
 * @extends {BaseAPI}
 */
export class StartupsApi extends BaseAPI {
    /**
     * 
     * @param {CreateStartupDto} createStartupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupsApi
     */
    public startupsControllerCreate(createStartupDto: CreateStartupDto, options?: AxiosRequestConfig) {
        return StartupsApiFp(this.configuration).startupsControllerCreate(createStartupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OnboardStartupDto} onboardStartupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartupsApi
     */
    public startupsControllerOnBoardInvestor(onboardStartupDto: OnboardStartupDto, options?: AxiosRequestConfig) {
        return StartupsApiFp(this.configuration).startupsControllerOnBoardInvestor(onboardStartupDto, options).then((request) => request(this.axios, this.basePath));
    }
}


